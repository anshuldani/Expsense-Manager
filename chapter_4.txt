Expense Manager CLIThe Expense Manager CLI is a command-line application designed to manage users and track expenses in a MySQL database. It supports a range of functions, including CRUD operations on users and expenses, and provides OLAP (Online Analytical Processing) queries to analyze spending patterns. This project is written in Python and utilizes the MySQL Connector library to interface with a MySQL database.Table of Contents:- Requirements- Setup- Database Schema- Features- Usage- Error Handling- CreatorsRequirements:To run the Expense Manager CLI application, you will need:- Python 3.6+- MySQL server- MySQL ConnectorSetup:1. Database Configuration   - Create a MySQL database named `ExpenseManager`.   - Use the following tables in the `ExpenseManager` database:     ```sql     CREATE TABLE User (         UserID INT AUTO_INCREMENT PRIMARY KEY,         Name VARCHAR(50),         Email VARCHAR(50) UNIQUE,         Password VARCHAR(255),         Age INT,         Gender ENUM('male', 'female'),         Location VARCHAR(50)     );     CREATE TABLE Expense (         ExpenseID INT AUTO_INCREMENT PRIMARY KEY,         UserID INT,         CategoryID INT,         Amount DECIMAL(10, 2),         ExpenseDate DATETIME,         Description TEXT,         FOREIGN KEY (UserID) REFERENCES User(UserID),         FOREIGN KEY (CategoryID) REFERENCES Category(CategoryID)     );     CREATE TABLE Category (         CategoryID INT AUTO_INCREMENT PRIMARY KEY,         CategoryName VARCHAR(50) UNIQUE     );     CREATE TABLE PaymentMethod (         PaymentMethodID INT AUTO_INCREMENT PRIMARY KEY,         MethodName VARCHAR(50) UNIQUE     );     CREATE TABLE Transaction (         TransactionID INT AUTO_INCREMENT PRIMARY KEY,         ExpenseID INT,         PaymentMethodID INT,         FOREIGN KEY (ExpenseID) REFERENCES Expense(ExpenseID),         FOREIGN KEY (PaymentMethodID) REFERENCES PaymentMethod(PaymentMethodID)     );     ```   - You may need to adjust the MySQL credentials in `create_connection()` in the script if you use a different database configuration.3. Stored Procedures   - The `get_user_expenses` function uses a stored procedure to fetch expenses. Create the stored procedure in MySQL:     ```sql     DELIMITER //     CREATE PROCEDURE GetUserExpenses(IN userId INT)     BEGIN         SELECT * FROM Expense WHERE UserID = userId;     END //     DELIMITER ;     ```Features:1. CRUD Operations on Users   - Create a new user.   - Read all users.   - Update a user's location.   - Delete a user.2. Expense Management   - Retrieve expenses for a specific user using a stored procedure.   3. OLAP Analysis Queries   - View total expenses grouped by user and category.   - View total expenses per category.   - View monthly expenses per user.   - View average expenses per payment method.Usage:Run the program with the following command:```bashpython expense_manager.py```The application will display a menu with the following options:1. Create User: Add a new user to the `User` table by entering their name, email, password, age, gender, and location.2. View Users: Display all users currently stored in the database.3. Update User Location: Modify the location field for a specified user.4. Delete User: Remove a user from the database using their user ID.5. Get User Expenses: Retrieve expenses for a specified user by invoking the `GetUserExpenses` stored procedure.6. Total Expenses by User and Category: Display a list of total expenses aggregated by user and category.7. Total Expenses per Category: Show the total expenses per category, ordered by the amount in descending order.8. Monthly Expenses per User: View each user’s monthly expenses, aggregated by month.9. Average Expense per Payment Method: Display the average expenses grouped by payment method, useful for payment analysis.10. Exit: Close the database connection and terminate the application.Error Handling:- Database Connectivity Issues: The program will alert you if there’s an issue connecting to the database.- Invalid Inputs: The application performs checks for email format, age, and gender inputs. It also verifies that the user ID is a numeric value where applicable.- SQL Execution Errors: In case of SQL errors, the program will print the specific error encountered, aiding in debugging.Creators:Anshul DaniSanjana Waghray Snehal Phadatare

VIDEO LINK FOR LOOM 
https://www.loom.com/share/23c09abf20a1426793b91c0d3d43988d?sid=7cb18773-2fd6-43d7-b832-85a5bf0148c1